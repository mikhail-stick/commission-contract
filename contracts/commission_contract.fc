#include "imports/stdlib.fc";
#include "imports/utils.fc";

const op::change_admin = "op::cnange_admin"c;
const op::transfer_notification = 0x7362d09c;
const op::transfer = 0xf8a7ea5;
const op::withdraw = "op::withdraw"c;

(int, slice, int, slice, cell) load_data() impure {
    var ds = get_data().begin_parse();

    return (
        ds~load_uint(32),
        ds~load_msg_addr(),
        ds~load_coins(),
        ds~load_msg_addr(),
        ds~load_ref()
    );
}

() save_data(int commission_percent, slice admin_address, int contract_jetton_amount, slice jetton_master_address, cell jetton_wallet_code) impure {
    set_data(
        begin_cell()
            .store_uint(commission_percent, 32)
            .store_slice(admin_address)
            .store_coins(contract_jetton_amount)
            .store_slice(jetton_master_address)
            .store_ref(jetton_wallet_code)
            .end_cell()
    );
}

() change_admin(slice in_msg_body, slice sender_address) impure {
    (int commission_percent, slice admin_address, int contract_jetton_amount,  slice jetton_master_address, cell jetton_wallet_code) = load_data(); 

    throw_unless(73, equal_slices_bits(sender_address, admin_address));
    
    int query_id = in_msg_body~load_uint(64); 
    slice new_admin_address = in_msg_body~load_msg_addr();

    save_data(commission_percent, new_admin_address, contract_jetton_amount, jetton_master_address, jetton_wallet_code);
}

() send_commission(slice in_msg_body, slice sender_address) impure {
    int query_id = in_msg_body~load_uint(64); 

    (int commission_percent, slice admin_address, int contract_jetton_amount,  slice jetton_master_address, cell jetton_wallet_code) = load_data(); 

    int coins = in_msg_body~load_coins();
    slice from_address = in_msg_body~load_msg_addr();
    slice either_forward_payload = in_msg_body;

    slice contract_jetton_wallet_address = calculate_user_jetton_wallet_address(my_address(), jetton_master_address, jetton_wallet_code);

    int commission = commission_percent * coins / 100;
    contract_jetton_amount += coins - commission;
    
    var msg_body = begin_cell()
        .store_uint(op::transfer, 32)
        .store_uint(query_id, 64)
        .store_coins(commission)
        .store_slice(admin_address)
        .store_slice(admin_address)
        .store_uint(0, 1)
        .store_coins(1) 
        .store_uint(0, 8);

    var msg = begin_cell()
        .store_uint(0x10, 6)
        .store_slice(contract_jetton_wallet_address)
        .store_coins(100000000)
        .store_uint(1, 1 + 4 + 4 + 64 + 32 + 1 + 1)
        .store_ref(msg_body.end_cell());
    
    send_raw_message(msg.end_cell(), 2);

    save_data(commission_percent, admin_address, contract_jetton_amount, jetton_master_address, jetton_wallet_code);
}

() withdraw(slice in_msg_body, slice sender_address) impure {
    (int commission_percent, slice admin_address, int contract_jetton_amount,  slice jetton_master_address, cell jetton_wallet_code) = load_data(); 

    throw_unless(73, equal_slices_bits(sender_address, admin_address));
    
    int query_id = in_msg_body~load_uint(64); 
    slice receiver_address = in_msg_body~load_msg_addr();

    slice contract_jetton_wallet_address = calculate_user_jetton_wallet_address(my_address(), jetton_master_address, jetton_wallet_code);
    
    var msg_body = begin_cell()
        .store_uint(op::transfer, 32)
        .store_uint(query_id, 64)
        .store_coins(contract_jetton_amount)
        .store_slice(receiver_address)
        .store_slice(receiver_address)
        .store_uint(0, 1)
        .store_coins(1) 
        .store_uint(0, 8);
    
    var msg = begin_cell()
        .store_uint(0x10, 6)
        .store_slice(contract_jetton_wallet_address)
        .store_coins(100000000)
        .store_uint(1, 1 + 4 + 4 + 64 + 32 + 1 + 1)
        .store_ref(msg_body.end_cell());
    
    send_raw_message(msg.end_cell(), 2);

    contract_jetton_amount = 0;

    save_data(commission_percent, admin_address, contract_jetton_amount, jetton_master_address, jetton_wallet_code);
}

() recv_internal(int my_balance, int msg_value, cell in_msg_full, slice in_msg_body) impure {
    if (in_msg_body.slice_empty?()) {
        return ();
    }

    slice cs = in_msg_full.begin_parse();
    int flags = cs~load_uint(4);
    if (flags & 1) {
        return ();
    }
    slice sender_address = cs~load_msg_addr();

    int op = in_msg_body~load_uint(32); 

    if (op == op::change_admin) {
        change_admin(in_msg_body, sender_address);
        return();
    }

    if (op == op::transfer_notification) {
        send_commission(in_msg_body, sender_address);
        return();
    }

    if (op == op::withdraw) {
        withdraw(in_msg_body, sender_address);
        return();
    }

    throw(0xffff); 
}

int get_commission() method_id {
    (int commission_percent, slice admin_address, int contract_jetton_amount,  slice jetton_master_address, cell jetton_wallet_code) = load_data(); 
    return commission_percent;
}

slice get_admin() method_id {
    (int commission_percent, slice admin_address, int contract_jetton_amount,  slice jetton_master_address, cell jetton_wallet_code) = load_data(); 
    return admin_address;
}

int get_coins() method_id {
    (int commission_percent, slice admin_address, int contract_jetton_amount,  slice jetton_master_address, cell jetton_wallet_code) = load_data(); 
    return contract_jetton_amount;
}
